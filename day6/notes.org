* 01 two dimensional arrays
定义二维数组的格式有两种：等长和不等长
int[][] arr = new int[3][2];
int[][] arr = new int[3][];
arr[0] = new int[3];
arr[1] = new int[1];
arr[2] = new int[2];

* 02 two dimensional arrays
打印二维数组的名称的时候结果类似于 [[I@23848, 非常明显的两个 [，表示二
维数组，打印 二维数组中的一维数组 arr[1]，结果就是 [I@48298 这样的，只
有打印 arr[1][0]，这样才能出现实际的数值。
如果二维数组没有对其中的一维数组进行 new int[3] 这样的操作，那么直接使
用的时候会出现运行时异常。NullPointerException 异常。

* 03 two dimensional arrays
二维数组 arr.length 数值是其中一维数组的个数，arr[1].length，是arr[1]
中的元素个数。

二维数组另外一种定义方式：
int[][] arr = {{1, 2, 3}, {4, 5}, {6}};

* 06 class
成员分为两种：
1. 成员变量，表示属性
2. 成员函数，表示行为

* 08 class variable and local variable
成员变量和局部变量的区别：
1. 成员变量在类里面，整个类中都可以访问，局部变量在函数，语句，局部代
   码块中，所属的区域有效。
2. 成员变量存在于堆内存，局部变量存在于栈内存。
3. 成员变量随着对象创建而存在，对象消失而消失，局部变量随着所属区域执
   行而存在，所属区域消失而消失。
4. 成员变量都有默认初始化数值，局部变量没有默认初始化数值。

* 11 anonymous object
匿名对象两种用法：
1. 对象方法仅仅需要调用一次，就可以用匿名对象。 new Car().run();
2. 匿名对象可以作为实际参数进行传递。 show(new Car());

* 15 encapsulation
封装的好处：
1. 将变化隔离
2. 便于使用
3. 提高重用性
4. 提高安全性

封装原则：
1. 不需要对外提供的内容都隐藏起来
2. 属性都隐藏，提供公共方法对其访问。
